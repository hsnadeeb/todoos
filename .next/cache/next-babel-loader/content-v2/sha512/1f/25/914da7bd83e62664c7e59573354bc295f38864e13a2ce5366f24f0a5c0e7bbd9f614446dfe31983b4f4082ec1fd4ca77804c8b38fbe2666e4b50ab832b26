{"ast":null,"code":"// pages/api/todos/index.js\nimport { MongoClient } from 'mongodb';\nconst uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\nconst client = new MongoClient(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default async function handler(req, res) {\n  try {\n    await client.connect();\n    const database = client.db('todoos');\n    const collection = database.collection('todos');\n\n    if (req.method === 'GET') {\n      const todos = await collection.find({}).toArray();\n      res.status(200).json({\n        success: true,\n        data: todos\n      });\n    } else if (req.method === 'POST') {\n      const {\n        text\n      } = req.body;\n      const todo = await collection.insertOne({\n        text,\n        status: 'incomplete'\n      });\n      res.status(201).json({\n        success: true,\n        data: todo.ops[0]\n      });\n    } else {\n      res.status(405).json({\n        success: false,\n        error: 'Method not allowed'\n      });\n    }\n  } catch (error) {\n    console.error('Error in API route:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Server Error'\n    });\n  } finally {\n    await client.close();\n  }\n}","map":{"version":3,"sources":["C:/Users/hadee/Desktop/sharpnerProjects/todoos/pages/api/todos/index.js"],"names":["MongoClient","uri","client","useNewUrlParser","useUnifiedTopology","handler","req","res","connect","database","db","collection","method","todos","find","toArray","status","json","success","data","text","body","todo","insertOne","ops","error","console","close"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AAEA,MAAMC,GAAG,GAAG,6FAAZ;AACA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBC,GAAhB,EAAqB;AAAEE,EAAAA,eAAe,EAAE,IAAnB;AAAyBC,EAAAA,kBAAkB,EAAE;AAA7C,CAArB,CAAf;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAI;AACF,UAAML,MAAM,CAACM,OAAP,EAAN;AACA,UAAMC,QAAQ,GAAGP,MAAM,CAACQ,EAAP,CAAU,QAAV,CAAjB;AACA,UAAMC,UAAU,GAAGF,QAAQ,CAACE,UAAT,CAAoB,OAApB,CAAnB;;AAEA,QAAIL,GAAG,CAACM,MAAJ,KAAe,KAAnB,EAA0B;AACxB,YAAMC,KAAK,GAAG,MAAMF,UAAU,CAACG,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,EAApB;AACAR,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAEN;AAAvB,OAArB;AACD,KAHD,MAGO,IAAIP,GAAG,CAACM,MAAJ,KAAe,MAAnB,EAA2B;AAC9B,YAAM;AAAEQ,QAAAA;AAAF,UAAWd,GAAG,CAACe,IAArB;AACA,YAAMC,IAAI,GAAG,MAAMX,UAAU,CAACY,SAAX,CAAqB;AAAEH,QAAAA,IAAF;AAAQJ,QAAAA,MAAM,EAAE;AAAhB,OAArB,CAAnB;AACAT,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAEG,IAAI,CAACE,GAAL,CAAS,CAAT;AAAvB,OAArB;AACD,KAJI,MAIE;AACPjB,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBO,QAAAA,KAAK,EAAE;AAAzB,OAArB;AACD;AACF,GAfD,CAeE,OAAOA,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACAlB,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBO,MAAAA,KAAK,EAAE;AAAzB,KAArB;AACD,GAlBD,SAkBU;AACR,UAAMvB,MAAM,CAACyB,KAAP,EAAN;AACD;AACF","sourcesContent":["// pages/api/todos/index.js\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\r\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexport default async function handler(req, res) {\r\n  try {\r\n    await client.connect();\r\n    const database = client.db('todoos');\r\n    const collection = database.collection('todos');\r\n\r\n    if (req.method === 'GET') {\r\n      const todos = await collection.find({}).toArray();\r\n      res.status(200).json({ success: true, data: todos });\r\n    } else if (req.method === 'POST') {\r\n        const { text } = req.body;\r\n        const todo = await collection.insertOne({ text, status: 'incomplete' });\r\n        res.status(201).json({ success: true, data: todo.ops[0] });\r\n      } else {\r\n      res.status(405).json({ success: false, error: 'Method not allowed' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in API route:', error);\r\n    res.status(500).json({ success: false, error: 'Server Error' });\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}