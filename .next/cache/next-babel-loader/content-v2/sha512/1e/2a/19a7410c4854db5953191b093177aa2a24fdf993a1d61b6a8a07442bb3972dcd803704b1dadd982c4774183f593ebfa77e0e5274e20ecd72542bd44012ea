{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hadee\\\\Desktop\\\\sharpnerProjects\\\\todoos\\\\pages\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// pages/index.js\nimport { useState, useEffect } from 'react';\n\nconst Home = () => {\n  const {\n    0: todos,\n    1: setTodos\n  } = useState([]);\n  const {\n    0: newTodo,\n    1: setNewTodo\n  } = useState('');\n  const {\n    0: editingTodo,\n    1: setEditingTodo\n  } = useState(null); // Track the todo being edited\n\n  const fetchTodos = async () => {\n    try {\n      const response = await fetch('/api/todos');\n      const data = await response.json();\n\n      if (data.success) {\n        setTodos(data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n    }\n  };\n\n  const addTodo = async () => {\n    try {\n      const response = await fetch('/api/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: newTodo\n        })\n      });\n      const data = await response.json();\n\n      if (data.success) {\n        setTodos([...todos, data.data]);\n        setNewTodo('');\n      }\n    } catch (error) {\n      console.error('Error adding todo:', error);\n    }\n  };\n\n  const editTodo = async id => {\n    const editedText = prompt('Edit todo:', editingTodo.text);\n\n    if (editedText !== null) {\n      try {\n        const response = await fetch(`/api/todos/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: editedText\n          })\n        });\n        const data = await response.json();\n\n        if (data.success) {\n          const updatedTodos = todos.map(todo => todo._id === id ? _objectSpread(_objectSpread({}, todo), {}, {\n            text: editedText\n          }) : todo);\n          setTodos(updatedTodos);\n          setEditingTodo(null);\n        }\n      } catch (error) {\n        console.error('Error editing todo:', error);\n      }\n    }\n  };\n\n  const deleteTodo = async id => {\n    if (window.confirm('Are you sure you want to delete this todo?')) {\n      try {\n        const response = await fetch(`/api/todos/${id}`, {\n          method: 'DELETE'\n        });\n        const data = await response.json();\n\n        if (data.success) {\n          const updatedTodos = todos.filter(todo => todo._id !== id);\n          setTodos(updatedTodos);\n        }\n      } catch (error) {\n        console.error('Error deleting todo:', error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, [setNewTodo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        placeholder: \"Add a new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTodo,\n        children: \"Add Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editingTodo === todo ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editingTodo.text,\n            onChange: e => setEditingTodo(_objectSpread(_objectSpread({}, editingTodo), {}, {\n              text: e.target.value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editTodo(todo._id),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditingTodo(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [todo.text, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditingTodo(todo),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTodo(todo._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, todo._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this) // <div>\n  //   <h1>Todo List</h1>\n  //   <div>\n  //     <input\n  //       type=\"text\"\n  //       value={newTodo}\n  //       onChange={(e) => setNewTodo(e.target.value)}\n  //       placeholder=\"Add a new todo\"\n  //     />\n  //     <button onClick={addTodo}>Add Todo</button>\n  //   </div>\n  //   <ul>\n  //     {todos.map((todo) => (\n  //       <li key={todo._id}>\n  //         {editingTodo === todo ? (\n  //           <>\n  //             <input\n  //               type=\"text\"\n  //               value={todo.text}\n  //               onChange={(e) => setEditingTodo({ ...editingTodo, text: e.target.value })}\n  //             />\n  //             <button onClick={() => editTodo(todo._id)}>Save</button>\n  //             <button onClick={() => setEditingTodo(null)}>Cancel</button>\n  //           </>\n  //         ) : (\n  //           <>\n  //             {todo.text}\n  //             <button onClick={() => setEditingTodo(todo)}>Edit</button>\n  //             <button onClick={() => deleteTodo(todo._id)}>Delete</button>\n  //           </>\n  //         )}\n  //       </li>\n  //     ))}\n  //   </ul>\n  // </div>\n  ;\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/hadee/Desktop/sharpnerProjects/todoos/pages/index.js"],"names":["useState","useEffect","Home","todos","setTodos","newTodo","setNewTodo","editingTodo","setEditingTodo","fetchTodos","response","fetch","data","json","success","error","console","addTodo","method","headers","body","JSON","stringify","text","editTodo","id","editedText","prompt","updatedTodos","map","todo","_id","deleteTodo","window","confirm","filter","e","target","value"],"mappings":"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","sourcesContent":["// pages/index.js\nimport { useState, useEffect } from 'react';\n\nconst Home = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [editingTodo, setEditingTodo] = useState(null); // Track the todo being edited\n\n  const fetchTodos = async () => {\n    try {\n      const response = await fetch('/api/todos');\n      const data = await response.json();\n      if (data.success) {\n        setTodos(data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n    }\n  };\n\n  const addTodo = async () => {\n    try {\n      const response = await fetch('/api/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: newTodo }),\n      });\n\n      const data = await response.json();\n      if (data.success) {\n        setTodos([...todos, data.data]);\n        setNewTodo('');\n      }\n    } catch (error) {\n      console.error('Error adding todo:', error);\n    }\n  };\n\n  const editTodo = async (id) => {\n    const editedText = prompt('Edit todo:', editingTodo.text);\n    if (editedText !== null) {\n      try {\n        const response = await fetch(`/api/todos/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ text: editedText }),\n        });\n\n        const data = await response.json();\n        if (data.success) {\n          const updatedTodos = todos.map((todo) =>\n            todo._id === id ? { ...todo, text: editedText } : todo\n          );\n          setTodos(updatedTodos);\n          setEditingTodo(null);\n        }\n      } catch (error) {\n        console.error('Error editing todo:', error);\n      }\n    }\n  };\n\n  const deleteTodo = async (id) => {\n    if (window.confirm('Are you sure you want to delete this todo?')) {\n      try {\n        const response = await fetch(`/api/todos/${id}`, {\n          method: 'DELETE',\n        });\n\n        const data = await response.json();\n        if (data.success) {\n          const updatedTodos = todos.filter((todo) => todo._id !== id);\n          setTodos(updatedTodos);\n        }\n      } catch (error) {\n        console.error('Error deleting todo:', error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, [setNewTodo]);\n\n  return (\n    <div>\n    <h1>Todo List</h1>\n    <div>\n      <input\n        type=\"text\"\n        value={newTodo}\n        onChange={(e) => setNewTodo(e.target.value)}\n        placeholder=\"Add a new todo\"\n      />\n      <button onClick={addTodo}>Add Todo</button>\n    </div>\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo._id}>\n          {editingTodo === todo ? (\n            <>\n              <input\n                type=\"text\"\n                value={editingTodo.text}\n                onChange={(e) => setEditingTodo({ ...editingTodo, text: e.target.value })}\n              />\n              <button onClick={() => editTodo(todo._id)}>Save</button>\n              <button onClick={() => setEditingTodo(null)}>Cancel</button>\n            </>\n          ) : (\n            <>\n              {todo.text}\n              <button onClick={() => setEditingTodo(todo)}>Edit</button>\n              <button onClick={() => deleteTodo(todo._id)}>Delete</button>\n            </>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n    // <div>\n    //   <h1>Todo List</h1>\n    //   <div>\n    //     <input\n    //       type=\"text\"\n    //       value={newTodo}\n    //       onChange={(e) => setNewTodo(e.target.value)}\n    //       placeholder=\"Add a new todo\"\n    //     />\n    //     <button onClick={addTodo}>Add Todo</button>\n    //   </div>\n    //   <ul>\n    //     {todos.map((todo) => (\n    //       <li key={todo._id}>\n    //         {editingTodo === todo ? (\n    //           <>\n    //             <input\n    //               type=\"text\"\n    //               value={todo.text}\n    //               onChange={(e) => setEditingTodo({ ...editingTodo, text: e.target.value })}\n    //             />\n    //             <button onClick={() => editTodo(todo._id)}>Save</button>\n    //             <button onClick={() => setEditingTodo(null)}>Cancel</button>\n    //           </>\n    //         ) : (\n    //           <>\n    //             {todo.text}\n    //             <button onClick={() => setEditingTodo(todo)}>Edit</button>\n    //             <button onClick={() => deleteTodo(todo._id)}>Delete</button>\n    //           </>\n    //         )}\n    //       </li>\n    //     ))}\n    //   </ul>\n    // </div>\n  );\n};\n\nexport default Home;\n\n\n"]},"metadata":{},"sourceType":"module"}