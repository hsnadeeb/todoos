{"ast":null,"code":"// pages/api/todos/[id].js\nimport { MongoClient, ObjectId } from 'mongodb';\nconst uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\nconst client = new MongoClient(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nexport default async function handler(req, res) {\n  const {\n    query: {\n      id\n    },\n    method,\n    body\n  } = req;\n\n  try {\n    await client.connect();\n    const database = client.db('todoos');\n    const collection = database.collection('todos');\n\n    switch (method) {\n      case 'GET':\n        const todo = await collection.findOne({\n          _id: new ObjectId(id)\n        });\n\n        if (!todo) {\n          return res.status(404).json({\n            success: false,\n            error: 'Todo not found'\n          });\n        } // Continue with the rest of the code using `todo`...\n\n\n        res.status(200).json({\n          success: true,\n          data: todo\n        });\n        break;\n\n      case 'PUT':\n        const updatedTodo = await collection.findOneAndUpdate({\n          _id: new ObjectId(id)\n        }, {\n          $set: body\n        }, {\n          returnDocument: 'after'\n        });\n\n        if (!updatedTodo.value) {\n          return res.status(404).json({\n            success: false,\n            error: 'Todo not found'\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: updatedTodo.value\n        });\n        break;\n\n      case 'DELETE':\n        const deleteResult = await collection.deleteOne({\n          _id: new ObjectId(id)\n        });\n\n        if (deleteResult.deletedCount === 0) {\n          return res.status(404).json({\n            success: false,\n            error: 'Todo not found'\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n        break;\n\n      default:\n        res.status(405).json({\n          success: false,\n          error: 'Method not allowed'\n        });\n        break;\n    }\n  } catch (error) {\n    console.error('Error in API route:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Server Error'\n    });\n  } finally {\n    await client.close();\n  }\n} // // pages/api/todos/[id].js\n// import { MongoClient, ObjectId } from 'mongodb';\n// const uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\n// const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n// export default async function handler(req, res) {\n//   const {\n//     query: { id },\n//     method,\n//     body,\n//   } = req;\n//   try {\n//     await client.connect();\n//     const database = client.db('todoos');\n//     const collection = database.collection('todos');\n//     switch (method) {\n//       case 'GET':\n//         const todo = await collection.findOne({ _id: new ObjectId(id) });\n//         if (!todo) {\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\n//         }\n//         res.status(200).json({ success: true, data: todo });\n//         break;\n//       case 'PUT':\n//         const updatedTodo = await collection.findOneAndUpdate(\n//           { _id: new ObjectId(id) },\n//           { $set: body },\n//           { returnDocument: 'after' }\n//         );\n//         if (!updatedTodo.value) {\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\n//         }\n//         res.status(200).json({ success: true, data: updatedTodo.value });\n//         break;\n//       case 'DELETE':\n//         const deleteResult = await collection.deleteOne({ _id: new ObjectId(id) });\n//         if (deleteResult.deletedCount === 0) {\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\n//         }\n//         res.status(200).json({ success: true, data: {} });\n//         break;\n//       default:\n//         res.status(405).json({ success: false, error: 'Method not allowed' });\n//         break;\n//     }\n//   } catch (error) {\n//     console.error('Error in API route:', error);\n//     res.status(500).json({ success: false, error: 'Server Error' });\n//   } finally {\n//     await client.close();\n//   }\n// }","map":{"version":3,"sources":["C:/Users/hadee/Desktop/sharpnerProjects/todoos/pages/api/todos/[id].js"],"names":["MongoClient","ObjectId","uri","client","useNewUrlParser","useUnifiedTopology","handler","req","res","query","id","method","body","connect","database","db","collection","todo","findOne","_id","status","json","success","error","data","updatedTodo","findOneAndUpdate","$set","returnDocument","value","deleteResult","deleteOne","deletedCount","console","close"],"mappings":"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","sourcesContent":["// pages/api/todos/[id].js\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\r\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\nexport default async function handler(req, res) {\r\n  const {\r\n    query: { id },\r\n    method,\r\n    body,\r\n  } = req;\r\n\r\n  try {\r\n    await client.connect();\r\n    const database = client.db('todoos');\r\n    const collection = database.collection('todos');\r\n\r\n    switch (method) {\r\n      case 'GET':\r\n        const todo = await collection.findOne({ _id: new ObjectId(id) });\r\n\r\n        if (!todo) {\r\n          return res.status(404).json({ success: false, error: 'Todo not found' });\r\n        }\r\n        \r\n        // Continue with the rest of the code using `todo`...\r\n        \r\n        res.status(200).json({ success: true, data: todo });\r\n        break;\r\n\r\n      case 'PUT':\r\n        const updatedTodo = await collection.findOneAndUpdate(\r\n          { _id: new ObjectId(id) },\r\n          { $set: body },\r\n          { returnDocument: 'after' }\r\n        );\r\n        if (!updatedTodo.value) {\r\n          return res.status(404).json({ success: false, error: 'Todo not found' });\r\n        }\r\n        res.status(200).json({ success: true, data: updatedTodo.value });\r\n        break;\r\n\r\n      case 'DELETE':\r\n        const deleteResult = await collection.deleteOne({ _id: new ObjectId(id) });\r\n        if (deleteResult.deletedCount === 0) {\r\n          return res.status(404).json({ success: false, error: 'Todo not found' });\r\n        }\r\n        res.status(200).json({ success: true, data: {} });\r\n        break;\r\n\r\n      default:\r\n        res.status(405).json({ success: false, error: 'Method not allowed' });\r\n        break;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in API route:', error);\r\n    res.status(500).json({ success: false, error: 'Server Error' });\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// // pages/api/todos/[id].js\r\n// import { MongoClient, ObjectId } from 'mongodb';\r\n\r\n// const uri = 'mongodb+srv://shaz:YaEvs1cXGsw56jB9@todoos.1wqp0k6.mongodb.net/?retryWrites=true&w=majority';\r\n// const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\r\n\r\n// export default async function handler(req, res) {\r\n//   const {\r\n//     query: { id },\r\n//     method,\r\n//     body,\r\n//   } = req;\r\n\r\n//   try {\r\n//     await client.connect();\r\n//     const database = client.db('todoos');\r\n//     const collection = database.collection('todos');\r\n\r\n//     switch (method) {\r\n//       case 'GET':\r\n//         const todo = await collection.findOne({ _id: new ObjectId(id) });\r\n//         if (!todo) {\r\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\r\n//         }\r\n//         res.status(200).json({ success: true, data: todo });\r\n//         break;\r\n\r\n//       case 'PUT':\r\n//         const updatedTodo = await collection.findOneAndUpdate(\r\n//           { _id: new ObjectId(id) },\r\n//           { $set: body },\r\n//           { returnDocument: 'after' }\r\n//         );\r\n//         if (!updatedTodo.value) {\r\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\r\n//         }\r\n//         res.status(200).json({ success: true, data: updatedTodo.value });\r\n//         break;\r\n\r\n//       case 'DELETE':\r\n//         const deleteResult = await collection.deleteOne({ _id: new ObjectId(id) });\r\n//         if (deleteResult.deletedCount === 0) {\r\n//           return res.status(404).json({ success: false, error: 'Todo not found' });\r\n//         }\r\n//         res.status(200).json({ success: true, data: {} });\r\n//         break;\r\n\r\n//       default:\r\n//         res.status(405).json({ success: false, error: 'Method not allowed' });\r\n//         break;\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Error in API route:', error);\r\n//     res.status(500).json({ success: false, error: 'Server Error' });\r\n//   } finally {\r\n//     await client.close();\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}